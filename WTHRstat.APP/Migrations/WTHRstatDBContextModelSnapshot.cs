// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WTHRstat.APP.EntityFramework;

namespace WTHRstat.APP.Migrations
{
    [DbContext(typeof(WTHRstatDBContext))]
    partial class WTHRstatDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WTHRstat.APP.Models.EmissionERD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Concentration")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Pollutant")
                        .HasColumnType("text");

                    b.Property<int>("Source_Id")
                        .HasColumnType("int");

                    b.Property<string>("Units")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Source_Id");

                    b.ToTable("Emissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Concentration = 23,
                            Date = new DateTime(2015, 12, 31, 5, 10, 20, 0, DateTimeKind.Unspecified),
                            Pollutant = "Emiss-23",
                            Source_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            Concentration = 25,
                            Date = new DateTime(2015, 12, 31, 5, 10, 20, 0, DateTimeKind.Unspecified),
                            Pollutant = "Coqwe-211",
                            Source_Id = 2
                        },
                        new
                        {
                            Id = 3,
                            Concentration = 51,
                            Date = new DateTime(2015, 12, 31, 5, 10, 20, 0, DateTimeKind.Unspecified),
                            Pollutant = "Rqeeq-214",
                            Source_Id = 3
                        });
                });

            modelBuilder.Entity("WTHRstat.APP.Models.SourceERD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Bangladesh",
                            Country = "India"
                        },
                        new
                        {
                            Id = 2,
                            City = "Tokyo",
                            Country = "Japan"
                        },
                        new
                        {
                            Id = 3,
                            City = "Kyiv",
                            Country = "Ukraine"
                        });
                });

            modelBuilder.Entity("WTHRstat.APP.Models.EmissionERD", b =>
                {
                    b.HasOne("WTHRstat.APP.Models.SourceERD", "Source")
                        .WithMany("Emissions")
                        .HasForeignKey("Source_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
